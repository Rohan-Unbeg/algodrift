---
import type { WithContext, Article, WebSite, BreadcrumbList } from 'schema-dts';

interface Props {
  type: 'website' | 'article';
  article?: {
    title: string;
    description: string;
    publishDate: Date;
    updateDate?: Date;
    authorName: string;
    image?: string;
    section?: string;
  };
  breadcrumbs?: Array<{name: string; url: string}>;
  url: string;
}

const { type, article, breadcrumbs, url } = Astro.props;

// Base schema for the website
const websiteSchema: WithContext<WebSite> = {
  '@context': 'https://schema.org',
  '@type': 'WebSite',
  name: 'AlgoDrift',
  description: 'Stay updated with the latest in technology, AI, development tools, and programming tutorials.',
  url: 'https://algodrift.tech',
};

// Article schema (for blog posts)
let articleSchema: WithContext<Article> | null = null;
if (type === 'article' && article) {
  articleSchema = {
    '@context': 'https://schema.org',
    '@type': 'Article',
    headline: article.title,
    description: article.description,
    image: article.image || '/images/social-card.png',
    datePublished: article.publishDate.toISOString(),
    dateModified: article.updateDate ? article.updateDate.toISOString() : article.publishDate.toISOString(),
    author: {
      '@type': 'Person',
      name: article.authorName,
    },
    publisher: {
      '@type': 'Organization',
      name: 'AlgoDrift',
      logo: {
        '@type': 'ImageObject',
        url: 'https://algodrift.tech/logo.png',
      },
    },
    mainEntityOfPage: {
      '@type': 'WebPage',
      '@id': url,
    },
  };
}

// Breadcrumb schema
let breadcrumbSchema: WithContext<BreadcrumbList> | null = null;
if (breadcrumbs && breadcrumbs.length > 0) {
  breadcrumbSchema = {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: breadcrumbs.map((item, index) => ({
      '@type': 'ListItem',
      position: index + 1,
      name: item.name,
      item: item.url,
    })),
  };
}

// Combine all schemas
const schemas = [
  websiteSchema,
  ...(articleSchema ? [articleSchema] : []),
  ...(breadcrumbSchema ? [breadcrumbSchema] : []),
];
---
<Fragment>
  {schemas.map(schema => (
    <script type="application/ld+json" set:html={JSON.stringify(schema)} />
  ))}
</Fragment>