---
import Layout from '../../layouts/Layout.astro';
import BlogPostCard from '../../components/BlogPostCard.astro';
import { getCollection } from 'astro:content';
import SEOSchema from '../../components/SEOSchema.astro';

// Define BlogPost type for props
interface BlogPost {
  data: {
    title: string;
    description: string;
    pubDate: string;
    updatedDate?: string;
    heroImage?: string;
    author: string;
    categories: string[];
    tags: string[];
    draft?: boolean;
  };
  // Add other fields if BlogPostCard expects them
}

// Generate static paths for all categories
export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }: { data: { draft?: boolean; categories: string[]; pubDate: string } }) => {
    return !data.draft;
  });
  
  // Extract all categories
  const categories = Array.from(new Set(posts.flatMap((post: BlogPost) => post.data.categories))) as string[];
  
  // Create a path for each category
  return categories.map((category: string) => {
    // Filter posts by category
    const categoryPosts = posts
      .filter((post: BlogPost) => post.data.categories.includes(category))
      .sort((a: BlogPost, b: BlogPost) =>
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
      );

    return {
      params: { category: category.toLowerCase() },
      props: { 
        category, 
        posts: categoryPosts,
      },
    };
  });
}

// Get category and posts from props
const { category, posts } = Astro.props as { category: string; posts: BlogPost[] };

// SEO metadata
const title = `${category} Articles | Tech Insight Blog`;
const description = `Browse our collection of articles about ${category.toLowerCase()}.`;
const url = new URL(Astro.url.pathname, Astro.site).toString();

// Breadcrumbs
const breadcrumbs = [
  { name: 'Home', url: '/' },
  { name: 'Categories', url: '/categories' },
  { name: category, url: url },
];
---

<Layout title={title} description={description}>
  <SEOSchema 
    type="website" 
    url={url}
    breadcrumbs={breadcrumbs}
  />
  
  <div class="container py-12 md:py-16">
    <header class="text-center mb-12 md:mb-16">
      <div class="inline-block px-4 py-1 bg-primary-100 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300 rounded-full text-sm font-medium mb-4">
        Category
      </div>
      <h1 class="text-4xl md:text-5xl font-bold mb-4">{category}</h1>
      <p class="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
        Discover our articles about {category.toLowerCase()}.
      </p>
    </header>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {posts.map((post: BlogPost, index: number) => (
        <BlogPostCard post={post} featured={index === 0} />
      ))}
    </div>
    
    {posts.length === 0 && (
      <div class="text-center py-12">
        <p class="text-xl text-gray-600 dark:text-gray-400">
          No articles found in this category yet.
        </p>
      </div>
    )}
    
    <div class="mt-12 text-center">
      <a href="/categories" class="btn btn-ghost">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4 mr-1">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
        </svg>
        Back to Categories
      </a>
    </div>
  </div>
</Layout>