---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { formatDate, getReadingTime } from '../../utils/dateUtils';
import CategoryCloud from '../../components/CategoryCloud.astro';
import NewsletterSignup from '../../components/NewsletterSignup.astro';
import SEOSchema from '../../components/SEOSchema.astro';

// Generate static paths for all blog posts
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog', ({ data }: { data: { draft?: boolean } }) => {
    return !data.draft;
  });
  
  return blogEntries.map((entry: CollectionEntry<'blog'>) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get blog post from props
const { entry } = Astro.props as { entry: CollectionEntry<'blog'> };
const { Content } = await entry.render();

// Extract metadata from the blog post
const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  author,
  categories,
  tags
} = (entry as CollectionEntry<'blog'>).data as {
  title: string;
  description: string;
  pubDate: string;
  updatedDate?: string;
  heroImage?: string;
  author: string;
  categories: string[];
  tags: string[];
};

// Convert string dates to Date objects
const pubDateObj = new Date(pubDate);
const updatedDateObj = updatedDate ? new Date(updatedDate) : undefined;

// Format dates for display
const formattedPubDate = formatDate(pubDateObj);
const formattedUpdatedDate = updatedDateObj ? formatDate(updatedDateObj) : null;

// Get reading time
const readingTime = getReadingTime((entry as CollectionEntry<'blog'>).body);

// SEO data
const url = new URL(Astro.url.pathname, Astro.site).toString();
const articleData = {
  title,
  description,
  publishDate: pubDateObj,
  updateDate: updatedDateObj,
  authorName: author,
  image: heroImage,
  section: categories[0] || 'Technology',
};

// Breadcrumbs
const breadcrumbs = [
  { name: 'Home', url: '/' },
  { name: 'Blog', url: '/blog' },
  { name: title, url: url },
];

// Placeholder image if no hero image
const placeholderImage = '/images/placeholder.jpg';
const imageUrl = heroImage || placeholderImage;
---

<Layout 
  title={`${title} | Tech Insight Blog`}
  description={description}
  image={imageUrl}
  article={true}
  canonicalURL={url}
>
  <SEOSchema 
    type="article" 
    article={articleData} 
    breadcrumbs={breadcrumbs}
    url={url}
  />
  
  <article class="py-8 md:py-12">
    <div class="container max-w-4xl">
      <!-- Categories -->
      <div class="flex flex-wrap gap-2 mb-4">
        {categories.map((category: string) => (
          <a 
            href={`/categories/${category.toLowerCase()}`}
            class="px-3 py-1 text-sm font-medium bg-primary-100 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300 rounded-full hover:bg-primary-200 dark:hover:bg-primary-800/30 transition-colors"
          >
            {category}
          </a>
        ))}
      </div>
      
      <!-- Title -->
      <h1 class="text-4xl md:text-5xl font-bold mb-4 md:mb-6">{title}</h1>
      
      <!-- Meta info -->
      <div class="flex flex-wrap items-center text-gray-600 dark:text-gray-400 mb-8 gap-4">
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-1">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
          </svg>
          <span>{author}</span>
        </div>
        
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-1">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0121 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008H16.5V15zm0 2.25h.008v.008H16.5v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
          </svg>
          <span>{formattedPubDate}</span>
        </div>
        
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-1">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>{readingTime} min read</span>
        </div>
        
        {formattedUpdatedDate && (
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-1">
              <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
            </svg>
            <span>Updated on {formattedUpdatedDate}</span>
          </div>
        )}
      </div>
      
      <!-- Hero image -->
      {heroImage && (
        <img 
          src={heroImage} 
          alt={title}
          class="w-full h-auto rounded-xl mb-8 shadow-md"
        />
      )}
      
      <!-- Content -->
      <div class="prose prose-lg dark:prose-invert prose-headings:font-heading prose-a:text-primary-600 dark:prose-a:text-primary-400 max-w-none">
        <Content />
      </div>
      
      <!-- Tags -->
      {tags.length > 0 && (
        <div class="mt-12 pt-6 border-t dark:border-gray-800">
          <h3 class="text-lg font-semibold mb-3">Tags</h3>
          <div class="flex flex-wrap gap-2">
            {tags.map((tag: string) => (
              <a 
                href={`/tags/${tag.toLowerCase()}`}
                class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 rounded-full transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  </article>
  
  <!-- Newsletter signup and categories -->
  <aside class="bg-gray-50 dark:bg-gray-800/30 py-16">
    <div class="container max-w-4xl">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div class="md:col-span-2">
          <NewsletterSignup />
        </div>
        <div class="bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
          <CategoryCloud />
        </div>
      </div>
    </div>
  </aside>
</Layout>